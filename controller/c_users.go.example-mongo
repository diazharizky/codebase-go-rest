package controller

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	"gopkg.in/mgo.v2/bson"

	mdl "github.com/dimaskiddo/frame-go/model"
	svc "github.com/dimaskiddo/frame-go/service"
)

// resGetUsers Struct
type resGetUsers struct {
	Status  bool       `json:"status"`
	Code    int        `json:"code"`
	Message string     `json:"message"`
	Data    []mdl.User `json:"data"`
}

// GetUser Function to Get All User Data
func GetUser(w http.ResponseWriter, r *http.Request) {
	var users []mdl.User

	// Database Query
	err := svc.Mongo.C("users").Find(bson.M{}).All(&users)
	if err != nil {
		svc.ResponseInternalError(w, err.Error())
		return
	}

	var response resGetUsers

	// Set Response Data
	response.Status = true
	response.Code = http.StatusOK
	response.Message = "Success"
	response.Data = users

	// Write Response Data to HTTP
	svc.ResponseWrite(w, response.Code, response)
}

// AddUser Function to Add User Data
func AddUser(w http.ResponseWriter, r *http.Request) {
	var user mdl.User

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Set User ID to New Generated ID
	user.ID = bson.NewObjectId()

	// Database Query
	err := svc.Mongo.C("users").Insert(&user)
	if err != nil {
		svc.ResponseInternalError(w, err.Error())
		return
	}

	svc.ResponseCreated(w)
}

// GetUserByID Function to Get User Data By User ID
func GetUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Check if ID is Valid Object ID Hex
	if !bson.IsObjectIdHex(params["id"]) {
		svc.ResponseBadRequest(w, "Invalid object ids")
		return
	}

	var user mdl.User

	// Database Query
	err := svc.Mongo.C("users").FindId(bson.ObjectIdHex(params["id"])).One(&user)
	if err != nil {
		svc.ResponseInternalError(w, err.Error())
		return
	}

	var users []mdl.User
	var response resGetUsers

	// Convert Selected User from Users Array to Single User Array
	users = append(users, user)

	// Set Response Data
	response.Status = true
	response.Code = http.StatusOK
	response.Message = "Success"
	response.Data = users

	// Write Response Data to HTTP
	svc.ResponseWrite(w, response.Code, response)
}

// PutUserByID Function to Update User Data By User ID
func PutUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Check if ID is Valid Object ID Hex
	if !bson.IsObjectIdHex(params["id"]) {
		svc.ResponseBadRequest(w, "Invalid object ids")
		return
	}

	var user mdl.User

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Set User ID to Requested ID
	user.ID = bson.ObjectIdHex(params["id"])

	// Database Query
	err := svc.Mongo.C("users").UpdateId(bson.ObjectIdHex(params["id"]), &user)
	if err != nil {
		svc.ResponseInternalError(w, err.Error())
		return
	}

	svc.ResponseUpdated(w)
}

// DelUserByID Function to Delete User Data By User ID
func DelUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Check if ID is Valid Object ID Hex
	if !bson.IsObjectIdHex(params["id"]) {
		svc.ResponseBadRequest(w, "Invalid object ids")
		return
	}

	// Database Query Delete User
	err := svc.Mongo.C("users").RemoveId(bson.ObjectIdHex(params["id"]))
	if err != nil {
		svc.ResponseInternalError(w, err.Error())
		return
	}

	svc.ResponseSuccess(w, "")
}
