package controllers

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/dimaskiddo/frame-go/models"
	"github.com/dimaskiddo/frame-go/utils"

	"github.com/gorilla/mux"
	"gopkg.in/mgo.v2/bson"
)

// Get User Response Structure
type ResponseGetUser struct {
	Status  bool          `json:"status"`
	Code    int           `json:"code"`
	Message string        `json:"message"`
	Data    []models.User `json:"data"`
}

// Function to Get User
func GetUser(w http.ResponseWriter, r *http.Request) {
	var users []models.User

	// Database Query
	err := utils.Mongo.C("users").Find(bson.M{}).All(&users)
	if err == nil {
		var response ResponseGetUser

		// Set Response Data
		response.Status = true
		response.Code = http.StatusOK
		response.Message = "Success"
		response.Data = users

		// Write Response Data to HTTP
		utils.ResponseWrite(w, response.Code, response)
	} else {
		// Write Error Response Data to HTTP
		utils.ResponseInternalError(w, "Error, "+strings.Title(err.Error())+"!")

		// Print Log Error to Router Log Handler
		log.Println("Error, " + strings.Title(err.Error()) + "!")
	}
}

// Function to Add User
func AddUser(w http.ResponseWriter, r *http.Request) {
	var user models.User

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Set User ID to New Generated ID
	user.ID = bson.NewObjectId()

	// Database Query
	err := utils.Mongo.C("users").Insert(&user)
	if err == nil {
		var response utils.Response

		// Set Response Data
		response.Status = true
		response.Code = http.StatusCreated
		response.Message = "Success"

		// Write Response Data to HTTP
		utils.ResponseWrite(w, response.Code, response)
	} else {
		// Write Error Response Data to HTTP
		utils.ResponseInternalError(w, "Error, "+strings.Title(err.Error())+"!")

		// Print Log Error to Router Log Handler
		log.Println("Error, " + strings.Title(err.Error()) + "!")
	}
}

// Function to Get User By ID
func GetUserById(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Check if ID is Valid Object ID Hex
	if bson.IsObjectIdHex(params["id"]) {
		var user models.User
		var users []models.User

		// Database Query
		err := utils.Mongo.C("users").FindId(bson.ObjectIdHex(params["id"])).One(&user)
		if err == nil {
			var response ResponseGetUser

			// Convert Selected User from Users Array to Single User Array
			users = append(users, user)

			// Set Response Data
			response.Status = true
			response.Code = http.StatusOK
			response.Message = "Success"
			response.Data = users

			// Write Response Data to HTTP
			utils.ResponseWrite(w, response.Code, response)
		} else {
			// Write Error Response Data to HTTP
			utils.ResponseInternalError(w, "Error, "+strings.Title(err.Error())+"!")

			// Print Log Error to Router Log Handler
			log.Println("Error, " + strings.Title(err.Error()) + "!")
		}
	} else {
		// Write Error Response Data to HTTP
		utils.ResponseBadRequest(w, "Error, Invalid ObjectIDs!")

		// Print Log Error to Router Log Handler
		log.Println("Error, Invalid ObjectIDs!")
	}
}

// Function to Update User By ID
func PutUserById(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Check if ID is Valid Object ID Hex
	if bson.IsObjectIdHex(params["id"]) {
		var user models.User

		// Decode JSON from Request Body to User Data
		// Use _ As Temporary Variable
		_ = json.NewDecoder(r.Body).Decode(&user)

		// Set User ID to Requested ID
		user.ID = bson.ObjectIdHex(params["id"])

		// Database Query
		err := utils.Mongo.C("users").UpdateId(bson.ObjectIdHex(params["id"]), &user)
		if err == nil {
			var response utils.Response

			// Set Response Data
			response.Status = true
			response.Code = http.StatusOK
			response.Message = "Success"

			// Write Response Data to HTTP
			utils.ResponseWrite(w, response.Code, response)
		} else {
			// Write Error Response Data to HTTP
			utils.ResponseInternalError(w, "Error, "+strings.Title(err.Error())+"!")

			// Print Log Error to Router Log Handler
			log.Println("Error, " + strings.Title(err.Error()) + "!")
		}
	} else {
		// Write Error Response Data to HTTP
		utils.ResponseBadRequest(w, "Error, Invalid ObjectIDs!")

		// Print Log Error to Router Log Handler
		log.Println("Error, Invalid ObjectIDs!")
	}
}

// Function to Delete User By ID
func DelUserById(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Check if ID is Valid Object ID Hex
	if bson.IsObjectIdHex(params["id"]) {
		// Database Query Delete User
		err := utils.Mongo.C("users").RemoveId(bson.ObjectIdHex(params["id"]))
		if err == nil {
			var response utils.Response

			// Set Response Data
			response.Status = true
			response.Code = http.StatusOK
			response.Message = "Success"

			// Write Response Data to HTTP
			utils.ResponseWrite(w, response.Code, response)
		} else {
			// Write Error Response Data to HTTP
			utils.ResponseInternalError(w, "Error, "+strings.Title(err.Error())+"!")

			// Print Log Error to Router Log Handler
			log.Println("Error, " + strings.Title(err.Error()) + "!")
		}
	} else {
		// Write Error Response Data to HTTP
		utils.ResponseBadRequest(w, "Error, Invalid ObjectIDs!")

		// Print Log Error to Router Log Handler
		log.Println("Error, Invalid ObjectIDs!")
	}
}
