package controllers

import (
	"encoding/json"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/dimaskiddo/frame-go/models"
	"github.com/dimaskiddo/frame-go/utils"

	"github.com/gorilla/mux"
)

// ResponseGetUser Struct
type ResponseGetUser struct {
	Status  bool          `json:"status"`
	Code    int           `json:"code"`
	Message string        `json:"message"`
	Data    []models.User `json:"data"`
}

// GetUser Function to Get All User Data
func GetUser(w http.ResponseWriter, r *http.Request) {
	var user models.User
	var users []models.User

	// Database Query
	rows, err := utils.MySQL.Query("SELECT * FROM users")
	if err == nil {
		var response ResponseGetUser

		// Populate Data
		for rows.Next() {
			// Match / Binding Database Field with Struct
			err := rows.Scan(&user.ID, &user.Name, &user.Email)
			if err == nil {
				// Append User Struct to Users Array of Struct
				users = append(users, user)
			} else {
				// Print Log Error to Router Log Handler
				log.Println(strings.ToLower(err.Error()))
			}
		}
		defer rows.Close()

		// Set Response Data
		response.Status = true
		response.Code = http.StatusOK
		response.Message = "Success"
		response.Data = users

		// Write Response Data to HTTP
		utils.ResponseWrite(w, response.Code, response)
	} else {
		utils.ResponseInternalError(w, err)
		log.Println(err)
	}
}

// AddUser Function to Add User Data
func AddUser(w http.ResponseWriter, r *http.Request) {
	var user models.User

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Database Query
	_, err := utils.MySQL.Exec("INSERT INTO users (name, email) VALUE (?, ?)", user.Name, user.Email)
	if err == nil {
		utils.ResponseOK(w, "")
	} else {
		utils.ResponseInternalError(w, err)
		log.Println(err)
	}
}

// GetUserByID Function to Get User Data By User ID
func GetUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Get ID Parameters From URI Then Convert it to Integer
	userID, err := strconv.Atoi(params["id"])
	if err == nil {
		var user models.User
		var users []models.User

		// Database Query
		rows, err := utils.MySQL.Query("SELECT * FROM users WHERE id=? LIMIT 1", userID)
		if err == nil {
			var response ResponseGetUser

			// Populate Data
			for rows.Next() {
				// Match / Binding Database Field with Struct
				err := rows.Scan(&user.ID, &user.Name, &user.Email)
				if err == nil {
					// Append User Struct to Users Array of Struct
					users = append(users, user)
				} else {
					// Print Log Error to Router Log Handler
					log.Println(strings.ToLower(err.Error()))
				}
			}
			defer rows.Close()

			// Set Response Data
			response.Status = true
			response.Code = http.StatusOK
			response.Message = "Success"
			response.Data = users

			// Write Response Data to HTTP
			utils.ResponseWrite(w, response.Code, response)
		} else {
			utils.ResponseInternalError(w, err)
			log.Println(err)
		}
	} else {
		utils.ResponseInternalError(w, err)
		log.Println(err)
	}
}

// PutUserByID Function to Update User Data By User ID
func PutUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Get ID Parameters From URI Then Convert it to Integer
	userID, err := strconv.Atoi(params["id"])
	if err == nil {
		var user models.User

		// Decode JSON from Request Body to User Data
		// Use _ As Temporary Variable
		_ = json.NewDecoder(r.Body).Decode(&user)

		// Database Query
		_, err := utils.MySQL.Exec("UPDATE users SET name=?, email=? WHERE id=? LIMIT 1", user.Name, user.Email, userID)
		if err == nil {
			utils.ResponseOK(w, "")
		} else {
			utils.ResponseInternalError(w, err)
			log.Println(err)
		}
	} else {
		utils.ResponseInternalError(w, err)
		log.Println(err)
	}
}

// DelUserByID Function to Delete User Data By User ID
func DelUserByID(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Get ID Parameters From URI Then Convert it to Integer
	userID, err := strconv.Atoi(params["id"])
	if err == nil {
		// Database Query
		_, err := utils.MySQL.Query("DELETE FROM users WHERE id=? LIMIT 1", userID)
		if err == nil {
			utils.ResponseOK(w, "")
		} else {
			utils.ResponseInternalError(w, err)
			log.Println(err)
		}
	} else {
		utils.ResponseInternalError(w, err)
		log.Println(err)
	}
}
