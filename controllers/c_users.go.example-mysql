package controllers

import (
	"encoding/json"
	"log"
	"net/http"
	"strconv"

	"github.com/dimaskiddo/frame-go/models"
	"github.com/dimaskiddo/frame-go/utils"

	"github.com/gorilla/mux"
)

// Get User Response Structure
type ResponseGetUser struct {
	Status  bool          `json:"status"`
	Code    int           `json:"code"`
	Message string        `json:"message"`
	Data    []models.User `json:"data"`
}

// Function to Get User
func GetUser(w http.ResponseWriter, r *http.Request) {
	var user models.User
	var users []models.User
	var response ResponseGetUser

	// Database Query
	rows, err := utils.MySQL.Query("SELECT * FROM users")
	defer rows.Close()

	if err == nil {
		// Populate Data
		for rows.Next() {
			// Match / Binding Database Field with Struct
			err := rows.Scan(&user.ID, &user.Name, &user.Email)
			if err == nil {
				// Append User Struct to Users Array of Struct
				users = append(users, user)
			} else {
				utils.ResponseInternalError(w)
				log.Println(err.Error())
			}
		}

		// Set Response Data
		response.Status = true
		response.Code = http.StatusOK
		response.Message = "Success"
		response.Data = users

		// Write Response Data to HTTP
		utils.ResponseWrite(w, response.Code, response)
	} else {
		utils.ResponseInternalError(w)
		log.Println(err.Error())
	}
}

// Function to Add User
func AddUser(w http.ResponseWriter, r *http.Request) {
	var user models.User
	var response utils.Response

	// Decode JSON from Request Body to User Data
	// Use _ As Temporary Variable
	_ = json.NewDecoder(r.Body).Decode(&user)

	// Database Query
	_, err := utils.MySQL.Exec("INSERT INTO users (name, email) VALUE (?, ?)", user.Name, user.Email)
	if err == nil {
		// Set Response Data
		response.Status = true
		response.Code = http.StatusCreated
		response.Message = "Success"

		// Write Response Data to HTTP
		utils.ResponseWrite(w, response.Code, response)
	} else {
		utils.ResponseInternalError(w)
		log.Println(err.Error())
	}
}

// Function to Get User By ID
func GetUserById(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Handle Error If Parameters ID is Empty
	if len(params["id"]) == 0 {
		utils.ResponseBadRequest(w)
	} else {
		// Get ID Parameters From URI Then Convert it to Integer
		userID, err := strconv.Atoi(params["id"])
		if err == nil {
			var user models.User
			var users []models.User
			var response ResponseGetUser

			// Database Query
			rows, err := utils.MySQL.Query("SELECT * FROM users WHERE id=? LIMIT 1", userID)
			defer rows.Close()

			if err == nil {
				// Populate Data
				for rows.Next() {
					// Match / Binding Database Field with Struct
					err := rows.Scan(&user.ID, &user.Name, &user.Email)
					if err == nil {
						// Append User Struct to Users Array of Struct
						users = append(users, user)
					} else {
						utils.ResponseInternalError(w)
						log.Println(err.Error())
					}
				}

				// Set Response Data
				response.Status = true
				response.Code = http.StatusOK
				response.Message = "Success"
				response.Data = users

				// Write Response Data to HTTP
				utils.ResponseWrite(w, response.Code, response)
			} else {
				utils.ResponseInternalError(w)
				log.Println(err.Error())
			}
		} else {
			utils.ResponseInternalError(w)
			log.Println(err.Error())
		}
	}
}

// Function to Update User By ID
func PutUserById(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Handle Error If Parameters ID is Empty
	if len(params["id"]) == 0 {
		utils.ResponseBadRequest(w)
	} else {
		// Get ID Parameters From URI Then Convert it to Integer
		userID, err := strconv.Atoi(params["id"])
		if err == nil {
			var user models.User
			var response utils.Response

			// Decode JSON from Request Body to User Data
			// Use _ As Temporary Variable
			_ = json.NewDecoder(r.Body).Decode(&user)

			// Database Query
			_, err := utils.MySQL.Exec("UPDATE users SET name=?, email=? WHERE id=? LIMIT 1", user.Name, user.Email, userID)
			if err == nil {
				// Set Response Data
				response.Status = true
				response.Code = http.StatusCreated
				response.Message = "Success"

				// Write Response Data to HTTP
				utils.ResponseWrite(w, response.Code, response)
			} else {
				utils.ResponseInternalError(w)
				log.Println(err.Error())
			}
		} else {
			utils.ResponseInternalError(w)
			log.Println(err.Error())
		}
	}
}

// Function to Delete User By ID
func DelUserById(w http.ResponseWriter, r *http.Request) {
	// Get Parameters From URI
	params := mux.Vars(r)

	// Handle Error If Parameters ID is Empty
	if len(params["id"]) == 0 {
		utils.ResponseBadRequest(w)
	} else {
		// Get ID Parameters From URI Then Convert it to Integer
		userID, err := strconv.Atoi(params["id"])
		if err == nil {
			var response utils.Response

			// Database Query
			_, err := utils.MySQL.Query("DELETE FROM users WHERE id=? LIMIT 1", userID)
			if err == nil {
				// Set Response Data
				response.Status = true
				response.Code = http.StatusOK
				response.Message = "Success"

				// Write Response Data to HTTP
				utils.ResponseWrite(w, response.Code, response)
			} else {
				utils.ResponseInternalError(w)
				log.Println(err.Error())
			}
		} else {
			utils.ResponseInternalError(w)
			log.Println(err.Error())
		}
	}
}
